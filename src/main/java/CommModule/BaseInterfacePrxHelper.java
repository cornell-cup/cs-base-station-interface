// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CommModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package CommModule;

public final class BaseInterfacePrxHelper extends Ice.ObjectPrxHelperBase implements BaseInterfacePrx
{
    private static final String __allOff_name = "allOff";

    public void allOff()
    {
        allOff(null, false);
    }

    public void allOff(java.util.Map<String, String> __ctx)
    {
        allOff(__ctx, true);
    }

    private void allOff(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "allOff", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.allOff(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_allOff()
    {
        return begin_allOff(null, false, null);
    }

    public Ice.AsyncResult begin_allOff(java.util.Map<String, String> __ctx)
    {
        return begin_allOff(__ctx, true, null);
    }

    public Ice.AsyncResult begin_allOff(Ice.Callback __cb)
    {
        return begin_allOff(null, false, __cb);
    }

    public Ice.AsyncResult begin_allOff(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_allOff(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_allOff(Callback_BaseInterface_allOff __cb)
    {
        return begin_allOff(null, false, __cb);
    }

    public Ice.AsyncResult begin_allOff(java.util.Map<String, String> __ctx, Callback_BaseInterface_allOff __cb)
    {
        return begin_allOff(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_allOff(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __allOff_name, __cb);
        try
        {
            __result.__prepare(__allOff_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_allOff(Ice.AsyncResult __result)
    {
        __end(__result, __allOff_name);
    }

    private static final String __init_name = "init";

    public void init(String ip, String name, int port, int id)
    {
        init(ip, name, port, id, null, false);
    }

    public void init(String ip, String name, int port, int id, java.util.Map<String, String> __ctx)
    {
        init(ip, name, port, id, __ctx, true);
    }

    private void init(String ip, String name, int port, int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "init", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.init(ip, name, port, id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_init(String ip, String name, int port, int id)
    {
        return begin_init(ip, name, port, id, null, false, null);
    }

    public Ice.AsyncResult begin_init(String ip, String name, int port, int id, java.util.Map<String, String> __ctx)
    {
        return begin_init(ip, name, port, id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_init(String ip, String name, int port, int id, Ice.Callback __cb)
    {
        return begin_init(ip, name, port, id, null, false, __cb);
    }

    public Ice.AsyncResult begin_init(String ip, String name, int port, int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_init(ip, name, port, id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_init(String ip, String name, int port, int id, Callback_BaseInterface_init __cb)
    {
        return begin_init(ip, name, port, id, null, false, __cb);
    }

    public Ice.AsyncResult begin_init(String ip, String name, int port, int id, java.util.Map<String, String> __ctx, Callback_BaseInterface_init __cb)
    {
        return begin_init(ip, name, port, id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_init(String ip, String name, int port, int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __init_name, __cb);
        try
        {
            __result.__prepare(__init_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(ip);
            __os.writeString(name);
            __os.writeInt(port);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_init(Ice.AsyncResult __result)
    {
        __end(__result, __init_name);
    }

    private static final String __laserTagFire_name = "laserTagFire";

    public void laserTagFire()
    {
        laserTagFire(null, false);
    }

    public void laserTagFire(java.util.Map<String, String> __ctx)
    {
        laserTagFire(__ctx, true);
    }

    private void laserTagFire(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "laserTagFire", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.laserTagFire(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_laserTagFire()
    {
        return begin_laserTagFire(null, false, null);
    }

    public Ice.AsyncResult begin_laserTagFire(java.util.Map<String, String> __ctx)
    {
        return begin_laserTagFire(__ctx, true, null);
    }

    public Ice.AsyncResult begin_laserTagFire(Ice.Callback __cb)
    {
        return begin_laserTagFire(null, false, __cb);
    }

    public Ice.AsyncResult begin_laserTagFire(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_laserTagFire(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_laserTagFire(Callback_BaseInterface_laserTagFire __cb)
    {
        return begin_laserTagFire(null, false, __cb);
    }

    public Ice.AsyncResult begin_laserTagFire(java.util.Map<String, String> __ctx, Callback_BaseInterface_laserTagFire __cb)
    {
        return begin_laserTagFire(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_laserTagFire(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __laserTagFire_name, __cb);
        try
        {
            __result.__prepare(__laserTagFire_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_laserTagFire(Ice.AsyncResult __result)
    {
        __end(__result, __laserTagFire_name);
    }

    private static final String __laserTagShield_name = "laserTagShield";

    public void laserTagShield()
    {
        laserTagShield(null, false);
    }

    public void laserTagShield(java.util.Map<String, String> __ctx)
    {
        laserTagShield(__ctx, true);
    }

    private void laserTagShield(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "laserTagShield", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.laserTagShield(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_laserTagShield()
    {
        return begin_laserTagShield(null, false, null);
    }

    public Ice.AsyncResult begin_laserTagShield(java.util.Map<String, String> __ctx)
    {
        return begin_laserTagShield(__ctx, true, null);
    }

    public Ice.AsyncResult begin_laserTagShield(Ice.Callback __cb)
    {
        return begin_laserTagShield(null, false, __cb);
    }

    public Ice.AsyncResult begin_laserTagShield(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_laserTagShield(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_laserTagShield(Callback_BaseInterface_laserTagShield __cb)
    {
        return begin_laserTagShield(null, false, __cb);
    }

    public Ice.AsyncResult begin_laserTagShield(java.util.Map<String, String> __ctx, Callback_BaseInterface_laserTagShield __cb)
    {
        return begin_laserTagShield(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_laserTagShield(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __laserTagShield_name, __cb);
        try
        {
            __result.__prepare(__laserTagShield_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_laserTagShield(Ice.AsyncResult __result)
    {
        __end(__result, __laserTagShield_name);
    }

    private static final String __moveArm_name = "moveArm";

    public void moveArm(String pos)
    {
        moveArm(pos, null, false);
    }

    public void moveArm(String pos, java.util.Map<String, String> __ctx)
    {
        moveArm(pos, __ctx, true);
    }

    private void moveArm(String pos, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "moveArm", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.moveArm(pos, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_moveArm(String pos)
    {
        return begin_moveArm(pos, null, false, null);
    }

    public Ice.AsyncResult begin_moveArm(String pos, java.util.Map<String, String> __ctx)
    {
        return begin_moveArm(pos, __ctx, true, null);
    }

    public Ice.AsyncResult begin_moveArm(String pos, Ice.Callback __cb)
    {
        return begin_moveArm(pos, null, false, __cb);
    }

    public Ice.AsyncResult begin_moveArm(String pos, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_moveArm(pos, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_moveArm(String pos, Callback_BaseInterface_moveArm __cb)
    {
        return begin_moveArm(pos, null, false, __cb);
    }

    public Ice.AsyncResult begin_moveArm(String pos, java.util.Map<String, String> __ctx, Callback_BaseInterface_moveArm __cb)
    {
        return begin_moveArm(pos, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_moveArm(String pos, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __moveArm_name, __cb);
        try
        {
            __result.__prepare(__moveArm_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(pos);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_moveArm(Ice.AsyncResult __result)
    {
        __end(__result, __moveArm_name);
    }

    private static final String __pokeBot_name = "pokeBot";

    public void pokeBot(String baseIP)
    {
        pokeBot(baseIP, null, false);
    }

    public void pokeBot(String baseIP, java.util.Map<String, String> __ctx)
    {
        pokeBot(baseIP, __ctx, true);
    }

    private void pokeBot(String baseIP, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "pokeBot", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.pokeBot(baseIP, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_pokeBot(String baseIP)
    {
        return begin_pokeBot(baseIP, null, false, null);
    }

    public Ice.AsyncResult begin_pokeBot(String baseIP, java.util.Map<String, String> __ctx)
    {
        return begin_pokeBot(baseIP, __ctx, true, null);
    }

    public Ice.AsyncResult begin_pokeBot(String baseIP, Ice.Callback __cb)
    {
        return begin_pokeBot(baseIP, null, false, __cb);
    }

    public Ice.AsyncResult begin_pokeBot(String baseIP, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_pokeBot(baseIP, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_pokeBot(String baseIP, Callback_BaseInterface_pokeBot __cb)
    {
        return begin_pokeBot(baseIP, null, false, __cb);
    }

    public Ice.AsyncResult begin_pokeBot(String baseIP, java.util.Map<String, String> __ctx, Callback_BaseInterface_pokeBot __cb)
    {
        return begin_pokeBot(baseIP, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_pokeBot(String baseIP, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __pokeBot_name, __cb);
        try
        {
            __result.__prepare(__pokeBot_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(baseIP);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_pokeBot(Ice.AsyncResult __result)
    {
        __end(__result, __pokeBot_name);
    }

    private static final String __reload_name = "reload";

    public void reload()
    {
        reload(null, false);
    }

    public void reload(java.util.Map<String, String> __ctx)
    {
        reload(__ctx, true);
    }

    private void reload(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "reload", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.reload(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_reload()
    {
        return begin_reload(null, false, null);
    }

    public Ice.AsyncResult begin_reload(java.util.Map<String, String> __ctx)
    {
        return begin_reload(__ctx, true, null);
    }

    public Ice.AsyncResult begin_reload(Ice.Callback __cb)
    {
        return begin_reload(null, false, __cb);
    }

    public Ice.AsyncResult begin_reload(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_reload(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_reload(Callback_BaseInterface_reload __cb)
    {
        return begin_reload(null, false, __cb);
    }

    public Ice.AsyncResult begin_reload(java.util.Map<String, String> __ctx, Callback_BaseInterface_reload __cb)
    {
        return begin_reload(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_reload(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __reload_name, __cb);
        try
        {
            __result.__prepare(__reload_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_reload(Ice.AsyncResult __result)
    {
        __end(__result, __reload_name);
    }

    private static final String __requestImageProcessing_name = "requestImageProcessing";

    public void requestImageProcessing()
    {
        requestImageProcessing(null, false);
    }

    public void requestImageProcessing(java.util.Map<String, String> __ctx)
    {
        requestImageProcessing(__ctx, true);
    }

    private void requestImageProcessing(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "requestImageProcessing", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.requestImageProcessing(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_requestImageProcessing()
    {
        return begin_requestImageProcessing(null, false, null);
    }

    public Ice.AsyncResult begin_requestImageProcessing(java.util.Map<String, String> __ctx)
    {
        return begin_requestImageProcessing(__ctx, true, null);
    }

    public Ice.AsyncResult begin_requestImageProcessing(Ice.Callback __cb)
    {
        return begin_requestImageProcessing(null, false, __cb);
    }

    public Ice.AsyncResult begin_requestImageProcessing(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_requestImageProcessing(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_requestImageProcessing(Callback_BaseInterface_requestImageProcessing __cb)
    {
        return begin_requestImageProcessing(null, false, __cb);
    }

    public Ice.AsyncResult begin_requestImageProcessing(java.util.Map<String, String> __ctx, Callback_BaseInterface_requestImageProcessing __cb)
    {
        return begin_requestImageProcessing(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_requestImageProcessing(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __requestImageProcessing_name, __cb);
        try
        {
            __result.__prepare(__requestImageProcessing_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_requestImageProcessing(Ice.AsyncResult __result)
    {
        __end(__result, __requestImageProcessing_name);
    }

    private static final String __restartBot_name = "restartBot";

    public void restartBot()
    {
        restartBot(null, false);
    }

    public void restartBot(java.util.Map<String, String> __ctx)
    {
        restartBot(__ctx, true);
    }

    private void restartBot(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "restartBot", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.restartBot(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_restartBot()
    {
        return begin_restartBot(null, false, null);
    }

    public Ice.AsyncResult begin_restartBot(java.util.Map<String, String> __ctx)
    {
        return begin_restartBot(__ctx, true, null);
    }

    public Ice.AsyncResult begin_restartBot(Ice.Callback __cb)
    {
        return begin_restartBot(null, false, __cb);
    }

    public Ice.AsyncResult begin_restartBot(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_restartBot(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_restartBot(Callback_BaseInterface_restartBot __cb)
    {
        return begin_restartBot(null, false, __cb);
    }

    public Ice.AsyncResult begin_restartBot(java.util.Map<String, String> __ctx, Callback_BaseInterface_restartBot __cb)
    {
        return begin_restartBot(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_restartBot(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __restartBot_name, __cb);
        try
        {
            __result.__prepare(__restartBot_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_restartBot(Ice.AsyncResult __result)
    {
        __end(__result, __restartBot_name);
    }

    private static final String __sendControlInfo_name = "sendControlInfo";

    public void sendControlInfo(int port, int on)
    {
        sendControlInfo(port, on, null, false);
    }

    public void sendControlInfo(int port, int on, java.util.Map<String, String> __ctx)
    {
        sendControlInfo(port, on, __ctx, true);
    }

    private void sendControlInfo(int port, int on, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendControlInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.sendControlInfo(port, on, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendControlInfo(int port, int on)
    {
        return begin_sendControlInfo(port, on, null, false, null);
    }

    public Ice.AsyncResult begin_sendControlInfo(int port, int on, java.util.Map<String, String> __ctx)
    {
        return begin_sendControlInfo(port, on, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendControlInfo(int port, int on, Ice.Callback __cb)
    {
        return begin_sendControlInfo(port, on, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendControlInfo(int port, int on, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendControlInfo(port, on, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendControlInfo(int port, int on, Callback_BaseInterface_sendControlInfo __cb)
    {
        return begin_sendControlInfo(port, on, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendControlInfo(int port, int on, java.util.Map<String, String> __ctx, Callback_BaseInterface_sendControlInfo __cb)
    {
        return begin_sendControlInfo(port, on, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendControlInfo(int port, int on, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendControlInfo_name, __cb);
        try
        {
            __result.__prepare(__sendControlInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(port);
            __os.writeInt(on);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendControlInfo(Ice.AsyncResult __result)
    {
        __end(__result, __sendControlInfo_name);
    }

    private static final String __sendMovementData_name = "sendMovementData";

    public void sendMovementData(int forward, int strafe, int rotate)
    {
        sendMovementData(forward, strafe, rotate, null, false);
    }

    public void sendMovementData(int forward, int strafe, int rotate, java.util.Map<String, String> __ctx)
    {
        sendMovementData(forward, strafe, rotate, __ctx, true);
    }

    private void sendMovementData(int forward, int strafe, int rotate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendMovementData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.sendMovementData(forward, strafe, rotate, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendMovementData(int forward, int strafe, int rotate)
    {
        return begin_sendMovementData(forward, strafe, rotate, null, false, null);
    }

    public Ice.AsyncResult begin_sendMovementData(int forward, int strafe, int rotate, java.util.Map<String, String> __ctx)
    {
        return begin_sendMovementData(forward, strafe, rotate, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendMovementData(int forward, int strafe, int rotate, Ice.Callback __cb)
    {
        return begin_sendMovementData(forward, strafe, rotate, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendMovementData(int forward, int strafe, int rotate, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendMovementData(forward, strafe, rotate, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendMovementData(int forward, int strafe, int rotate, Callback_BaseInterface_sendMovementData __cb)
    {
        return begin_sendMovementData(forward, strafe, rotate, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendMovementData(int forward, int strafe, int rotate, java.util.Map<String, String> __ctx, Callback_BaseInterface_sendMovementData __cb)
    {
        return begin_sendMovementData(forward, strafe, rotate, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendMovementData(int forward, int strafe, int rotate, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendMovementData_name, __cb);
        try
        {
            __result.__prepare(__sendMovementData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(forward);
            __os.writeInt(strafe);
            __os.writeInt(rotate);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendMovementData(Ice.AsyncResult __result)
    {
        __end(__result, __sendMovementData_name);
    }

    private static final String __sendSteeringData_name = "sendSteeringData";

    public void sendSteeringData(int direction)
    {
        sendSteeringData(direction, null, false);
    }

    public void sendSteeringData(int direction, java.util.Map<String, String> __ctx)
    {
        sendSteeringData(direction, __ctx, true);
    }

    private void sendSteeringData(int direction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendSteeringData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.sendSteeringData(direction, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendSteeringData(int direction)
    {
        return begin_sendSteeringData(direction, null, false, null);
    }

    public Ice.AsyncResult begin_sendSteeringData(int direction, java.util.Map<String, String> __ctx)
    {
        return begin_sendSteeringData(direction, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendSteeringData(int direction, Ice.Callback __cb)
    {
        return begin_sendSteeringData(direction, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendSteeringData(int direction, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendSteeringData(direction, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendSteeringData(int direction, Callback_BaseInterface_sendSteeringData __cb)
    {
        return begin_sendSteeringData(direction, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendSteeringData(int direction, java.util.Map<String, String> __ctx, Callback_BaseInterface_sendSteeringData __cb)
    {
        return begin_sendSteeringData(direction, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendSteeringData(int direction, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendSteeringData_name, __cb);
        try
        {
            __result.__prepare(__sendSteeringData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(direction);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendSteeringData(Ice.AsyncResult __result)
    {
        __end(__result, __sendSteeringData_name);
    }

    private static final String __sendTurretData_name = "sendTurretData";

    public void sendTurretData(int horizontal, int vertical)
    {
        sendTurretData(horizontal, vertical, null, false);
    }

    public void sendTurretData(int horizontal, int vertical, java.util.Map<String, String> __ctx)
    {
        sendTurretData(horizontal, vertical, __ctx, true);
    }

    private void sendTurretData(int horizontal, int vertical, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendTurretData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.sendTurretData(horizontal, vertical, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendTurretData(int horizontal, int vertical)
    {
        return begin_sendTurretData(horizontal, vertical, null, false, null);
    }

    public Ice.AsyncResult begin_sendTurretData(int horizontal, int vertical, java.util.Map<String, String> __ctx)
    {
        return begin_sendTurretData(horizontal, vertical, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendTurretData(int horizontal, int vertical, Ice.Callback __cb)
    {
        return begin_sendTurretData(horizontal, vertical, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendTurretData(int horizontal, int vertical, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendTurretData(horizontal, vertical, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendTurretData(int horizontal, int vertical, Callback_BaseInterface_sendTurretData __cb)
    {
        return begin_sendTurretData(horizontal, vertical, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendTurretData(int horizontal, int vertical, java.util.Map<String, String> __ctx, Callback_BaseInterface_sendTurretData __cb)
    {
        return begin_sendTurretData(horizontal, vertical, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendTurretData(int horizontal, int vertical, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendTurretData_name, __cb);
        try
        {
            __result.__prepare(__sendTurretData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(horizontal);
            __os.writeInt(vertical);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendTurretData(Ice.AsyncResult __result)
    {
        __end(__result, __sendTurretData_name);
    }

    private static final String __setDuneBotMotorSpeeds_name = "setDuneBotMotorSpeeds";

    public void setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft)
    {
        setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, null, false);
    }

    public void setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft, java.util.Map<String, String> __ctx)
    {
        setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, __ctx, true);
    }

    private void setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setDuneBotMotorSpeeds", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft)
    {
        return begin_setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, null, false, null);
    }

    public Ice.AsyncResult begin_setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft, java.util.Map<String, String> __ctx)
    {
        return begin_setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft, Ice.Callback __cb)
    {
        return begin_setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, null, false, __cb);
    }

    public Ice.AsyncResult begin_setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft, Callback_BaseInterface_setDuneBotMotorSpeeds __cb)
    {
        return begin_setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, null, false, __cb);
    }

    public Ice.AsyncResult begin_setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft, java.util.Map<String, String> __ctx, Callback_BaseInterface_setDuneBotMotorSpeeds __cb)
    {
        return begin_setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setDuneBotMotorSpeeds_name, __cb);
        try
        {
            __result.__prepare(__setDuneBotMotorSpeeds_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(frontLeft);
            __os.writeInt(frontRight);
            __os.writeInt(backRight);
            __os.writeInt(backLeft);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setDuneBotMotorSpeeds(Ice.AsyncResult __result)
    {
        __end(__result, __setDuneBotMotorSpeeds_name);
    }

    private static final String __setMotorSpeeds_name = "setMotorSpeeds";

    public void setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight)
    {
        setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, null, false);
    }

    public void setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight, java.util.Map<String, String> __ctx)
    {
        setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, __ctx, true);
    }

    private void setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setMotorSpeeds", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight)
    {
        return begin_setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, null, false, null);
    }

    public Ice.AsyncResult begin_setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight, java.util.Map<String, String> __ctx)
    {
        return begin_setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight, Ice.Callback __cb)
    {
        return begin_setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, null, false, __cb);
    }

    public Ice.AsyncResult begin_setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight, Callback_BaseInterface_setMotorSpeeds __cb)
    {
        return begin_setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, null, false, __cb);
    }

    public Ice.AsyncResult begin_setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight, java.util.Map<String, String> __ctx, Callback_BaseInterface_setMotorSpeeds __cb)
    {
        return begin_setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setMotorSpeeds_name, __cb);
        try
        {
            __result.__prepare(__setMotorSpeeds_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(frontLeft);
            __os.writeInt(frontRight);
            __os.writeInt(backLeft);
            __os.writeInt(backRight);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setMotorSpeeds(Ice.AsyncResult __result)
    {
        __end(__result, __setMotorSpeeds_name);
    }

    private static final String __shoot_name = "shoot";

    public void shoot()
    {
        shoot(null, false);
    }

    public void shoot(java.util.Map<String, String> __ctx)
    {
        shoot(__ctx, true);
    }

    private void shoot(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "shoot", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.shoot(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_shoot()
    {
        return begin_shoot(null, false, null);
    }

    public Ice.AsyncResult begin_shoot(java.util.Map<String, String> __ctx)
    {
        return begin_shoot(__ctx, true, null);
    }

    public Ice.AsyncResult begin_shoot(Ice.Callback __cb)
    {
        return begin_shoot(null, false, __cb);
    }

    public Ice.AsyncResult begin_shoot(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shoot(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_shoot(Callback_BaseInterface_shoot __cb)
    {
        return begin_shoot(null, false, __cb);
    }

    public Ice.AsyncResult begin_shoot(java.util.Map<String, String> __ctx, Callback_BaseInterface_shoot __cb)
    {
        return begin_shoot(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_shoot(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __shoot_name, __cb);
        try
        {
            __result.__prepare(__shoot_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_shoot(Ice.AsyncResult __result)
    {
        __end(__result, __shoot_name);
    }

    private static final String __shutdownBot_name = "shutdownBot";

    public void shutdownBot()
    {
        shutdownBot(null, false);
    }

    public void shutdownBot(java.util.Map<String, String> __ctx)
    {
        shutdownBot(__ctx, true);
    }

    private void shutdownBot(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "shutdownBot", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _BaseInterfaceDel __del = (_BaseInterfaceDel)__delBase;
                    __del.shutdownBot(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_shutdownBot()
    {
        return begin_shutdownBot(null, false, null);
    }

    public Ice.AsyncResult begin_shutdownBot(java.util.Map<String, String> __ctx)
    {
        return begin_shutdownBot(__ctx, true, null);
    }

    public Ice.AsyncResult begin_shutdownBot(Ice.Callback __cb)
    {
        return begin_shutdownBot(null, false, __cb);
    }

    public Ice.AsyncResult begin_shutdownBot(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shutdownBot(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_shutdownBot(Callback_BaseInterface_shutdownBot __cb)
    {
        return begin_shutdownBot(null, false, __cb);
    }

    public Ice.AsyncResult begin_shutdownBot(java.util.Map<String, String> __ctx, Callback_BaseInterface_shutdownBot __cb)
    {
        return begin_shutdownBot(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_shutdownBot(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __shutdownBot_name, __cb);
        try
        {
            __result.__prepare(__shutdownBot_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_shutdownBot(Ice.AsyncResult __result)
    {
        __end(__result, __shutdownBot_name);
    }

    public static BaseInterfacePrx checkedCast(Ice.ObjectPrx __obj)
    {
        BaseInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof BaseInterfacePrx)
            {
                __d = (BaseInterfacePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    BaseInterfacePrxHelper __h = new BaseInterfacePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static BaseInterfacePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        BaseInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof BaseInterfacePrx)
            {
                __d = (BaseInterfacePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    BaseInterfacePrxHelper __h = new BaseInterfacePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static BaseInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        BaseInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    BaseInterfacePrxHelper __h = new BaseInterfacePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static BaseInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        BaseInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    BaseInterfacePrxHelper __h = new BaseInterfacePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static BaseInterfacePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        BaseInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof BaseInterfacePrx)
            {
                __d = (BaseInterfacePrx)__obj;
            }
            else
            {
                BaseInterfacePrxHelper __h = new BaseInterfacePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static BaseInterfacePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        BaseInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            BaseInterfacePrxHelper __h = new BaseInterfacePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::CommModule::BaseInterface",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _BaseInterfaceDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _BaseInterfaceDelD();
    }

    public static void __write(IceInternal.BasicStream __os, BaseInterfacePrx v)
    {
        __os.writeProxy(v);
    }

    public static BaseInterfacePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            BaseInterfacePrxHelper result = new BaseInterfacePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
