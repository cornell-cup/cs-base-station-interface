// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CommModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package CommModule;

public final class SensorInterfacePrxHelper extends Ice.ObjectPrxHelperBase implements SensorInterfacePrx
{
    private static final String __initializeBot_name = "initializeBot";

    public void initializeBot(int botnum)
    {
        initializeBot(botnum, null, false);
    }

    public void initializeBot(int botnum, java.util.Map<String, String> __ctx)
    {
        initializeBot(botnum, __ctx, true);
    }

    private void initializeBot(int botnum, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "initializeBot", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SensorInterfaceDel __del = (_SensorInterfaceDel)__delBase;
                    __del.initializeBot(botnum, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_initializeBot(int botnum)
    {
        return begin_initializeBot(botnum, null, false, null);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum, java.util.Map<String, String> __ctx)
    {
        return begin_initializeBot(botnum, __ctx, true, null);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum, Ice.Callback __cb)
    {
        return begin_initializeBot(botnum, null, false, __cb);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_initializeBot(botnum, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum, Callback_SensorInterface_initializeBot __cb)
    {
        return begin_initializeBot(botnum, null, false, __cb);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum, java.util.Map<String, String> __ctx, Callback_SensorInterface_initializeBot __cb)
    {
        return begin_initializeBot(botnum, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_initializeBot(int botnum, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __initializeBot_name, __cb);
        try
        {
            __result.__prepare(__initializeBot_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_initializeBot(Ice.AsyncResult __result)
    {
        __end(__result, __initializeBot_name);
    }

    private static final String __pokeBase_name = "pokeBase";

    public void pokeBase(int botnum)
    {
        pokeBase(botnum, null, false);
    }

    public void pokeBase(int botnum, java.util.Map<String, String> __ctx)
    {
        pokeBase(botnum, __ctx, true);
    }

    private void pokeBase(int botnum, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "pokeBase", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SensorInterfaceDel __del = (_SensorInterfaceDel)__delBase;
                    __del.pokeBase(botnum, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_pokeBase(int botnum)
    {
        return begin_pokeBase(botnum, null, false, null);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum, java.util.Map<String, String> __ctx)
    {
        return begin_pokeBase(botnum, __ctx, true, null);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum, Ice.Callback __cb)
    {
        return begin_pokeBase(botnum, null, false, __cb);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_pokeBase(botnum, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum, Callback_SensorInterface_pokeBase __cb)
    {
        return begin_pokeBase(botnum, null, false, __cb);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum, java.util.Map<String, String> __ctx, Callback_SensorInterface_pokeBase __cb)
    {
        return begin_pokeBase(botnum, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_pokeBase(int botnum, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __pokeBase_name, __cb);
        try
        {
            __result.__prepare(__pokeBase_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_pokeBase(Ice.AsyncResult __result)
    {
        __end(__result, __pokeBase_name);
    }

    private static final String __sendHallSensorData_name = "sendHallSensorData";

    public void sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight)
    {
        sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null, false);
    }

    public void sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx)
    {
        sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, true);
    }

    private void sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendHallSensorData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SensorInterfaceDel __del = (_SensorInterfaceDel)__delBase;
                    __del.sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null, false, null);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, Ice.Callback __cb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, Callback_SensorInterface_sendHallSensorData __cb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx, Callback_SensorInterface_sendHallSensorData __cb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendHallSensorData_name, __cb);
        try
        {
            __result.__prepare(__sendHallSensorData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            __os.writeFloat(frontLeft);
            __os.writeFloat(frontRight);
            __os.writeFloat(backLeft);
            __os.writeFloat(backRight);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendHallSensorData(Ice.AsyncResult __result)
    {
        __end(__result, __sendHallSensorData_name);
    }

    private static final String __sendImuData_name = "sendImuData";

    public void sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az)
    {
        sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null, false);
    }

    public void sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx)
    {
        sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, true);
    }

    private void sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendImuData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SensorInterfaceDel __del = (_SensorInterfaceDel)__delBase;
                    __del.sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null, false, null);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, Ice.Callback __cb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, Callback_SensorInterface_sendImuData __cb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx, Callback_SensorInterface_sendImuData __cb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendImuData_name, __cb);
        try
        {
            __result.__prepare(__sendImuData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            __os.writeFloat(yaw);
            __os.writeFloat(pitch);
            __os.writeFloat(roll);
            __os.writeFloat(ax);
            __os.writeFloat(ay);
            __os.writeFloat(az);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendImuData(Ice.AsyncResult __result)
    {
        __end(__result, __sendImuData_name);
    }

    private static final String __sendLaserTagData_name = "sendLaserTagData";

    public void sendLaserTagData(int botnum, String laserTagDataType, int hitCount)
    {
        sendLaserTagData(botnum, laserTagDataType, hitCount, null, false);
    }

    public void sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx)
    {
        sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, true);
    }

    private void sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendLaserTagData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SensorInterfaceDel __del = (_SensorInterfaceDel)__delBase;
                    __del.sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, null, false, null);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, Ice.Callback __cb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, Callback_SensorInterface_sendLaserTagData __cb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx, Callback_SensorInterface_sendLaserTagData __cb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendLaserTagData_name, __cb);
        try
        {
            __result.__prepare(__sendLaserTagData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            __os.writeString(laserTagDataType);
            __os.writeInt(hitCount);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendLaserTagData(Ice.AsyncResult __result)
    {
        __end(__result, __sendLaserTagData_name);
    }

    private static final String __sendStreamingVideoData_name = "sendStreamingVideoData";

    public void sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq)
    {
        sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null, false);
    }

    public void sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx)
    {
        sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, true);
    }

    private void sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendStreamingVideoData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SensorInterfaceDel __del = (_SensorInterfaceDel)__delBase;
                    __del.sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null, false, null);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, Ice.Callback __cb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, Callback_SensorInterface_sendStreamingVideoData __cb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx, Callback_SensorInterface_sendStreamingVideoData __cb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendStreamingVideoData_name, __cb);
        try
        {
            __result.__prepare(__sendStreamingVideoData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            ByteSeqHelper.write(__os, bytes);
            __os.writeInt(cameraID);
            __os.writeInt(numObjectsDetected);
            ImgProcDataSeqHelper.write(__os, imgProcseq);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendStreamingVideoData(Ice.AsyncResult __result)
    {
        __end(__result, __sendStreamingVideoData_name);
    }

    public static SensorInterfacePrx checkedCast(Ice.ObjectPrx __obj)
    {
        SensorInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SensorInterfacePrx)
            {
                __d = (SensorInterfacePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    SensorInterfacePrxHelper __h = new SensorInterfacePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SensorInterfacePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        SensorInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SensorInterfacePrx)
            {
                __d = (SensorInterfacePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    SensorInterfacePrxHelper __h = new SensorInterfacePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SensorInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SensorInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    SensorInterfacePrxHelper __h = new SensorInterfacePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SensorInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        SensorInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    SensorInterfacePrxHelper __h = new SensorInterfacePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SensorInterfacePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        SensorInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SensorInterfacePrx)
            {
                __d = (SensorInterfacePrx)__obj;
            }
            else
            {
                SensorInterfacePrxHelper __h = new SensorInterfacePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static SensorInterfacePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SensorInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            SensorInterfacePrxHelper __h = new SensorInterfacePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::CommModule::SensorInterface",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _SensorInterfaceDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _SensorInterfaceDelD();
    }

    public static void __write(IceInternal.BasicStream __os, SensorInterfacePrx v)
    {
        __os.writeProxy(v);
    }

    public static SensorInterfacePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SensorInterfacePrxHelper result = new SensorInterfacePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
